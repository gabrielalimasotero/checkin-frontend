import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = "https://nwikoaogixmhiiqcdxqs.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im53aWtvYW9naXhtaGlpcWNkeHFzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5MDUwNDEsImV4cCI6MjA2OTQ4MTA0MX0.d279Vz-X33ps9P1Sx7iTgsH87oz55HMzm8U0_uukoOQ";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

console.log('üîç Verificando pol√≠ticas RLS...');
console.log('=============================');
console.log('');

async function checkPolicies() {
    try {
        // Verificar se RLS est√° habilitado
        console.log('üìã Verificando se RLS est√° habilitado...');
        
        const { data: rlsData, error: rlsError } = await supabase
            .rpc('get_rls_status', { table_name: 'users' });
        
        if (rlsError) {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar RLS via RPC');
        } else {
            console.log('‚úÖ RLS status:', rlsData);
        }
        
        // Tentar uma inser√ß√£o simples para testar
        console.log('');
        console.log('üß™ Testando inser√ß√£o com usu√°rio autenticado...');
        
        // Primeiro, vamos tentar fazer login com um usu√°rio existente
        const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
            email: 'test@example.com',
            password: 'TestPassword123!'
        });
        
        if (authError) {
            console.log('‚ùå Erro no login:', authError.message);
            console.log('üí° Vamos tentar criar um novo usu√°rio para teste');
            
            // Criar um novo usu√°rio
            const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
                email: `test${Date.now()}@example.com`,
                password: 'TestPassword123!'
            });
            
            if (signUpError) {
                console.log('‚ùå Erro ao criar usu√°rio:', signUpError.message);
                return;
            }
            
            console.log('‚úÖ Usu√°rio criado:', signUpData.user?.id);
            
            // Agora tentar inserir na tabela users
            const { data: insertData, error: insertError } = await supabase
                .from('users')
                .insert([
                    {
                        id: signUpData.user?.id,
                        name: 'Test User',
                        email: signUpData.user?.email,
                        is_connectable: true,
                        profile_visibility: 'friends',
                        auto_checkin_visibility: 'public',
                        allow_messages_from: 'friends',
                        review_delay: 'immediate',
                        notifications_enabled: true,
                    }
                ])
                .select();
            
            if (insertError) {
                console.log('‚ùå Erro na inser√ß√£o:', insertError.message);
                console.log('üìã Detalhes:', JSON.stringify(insertError, null, 2));
            } else {
                console.log('‚úÖ Inser√ß√£o bem-sucedida!');
                console.log('üìã Dados:', insertData);
            }
        } else {
            console.log('‚úÖ Login bem-sucedido:', authData.user?.id);
            
            // Tentar inserir na tabela users
            const { data: insertData, error: insertError } = await supabase
                .from('users')
                .insert([
                    {
                        id: authData.user?.id,
                        name: 'Test User',
                        email: authData.user?.email,
                        is_connectable: true,
                        profile_visibility: 'friends',
                        auto_checkin_visibility: 'public',
                        allow_messages_from: 'friends',
                        review_delay: 'immediate',
                        notifications_enabled: true,
                    }
                ])
                .select();
            
            if (insertError) {
                console.log('‚ùå Erro na inser√ß√£o:', insertError.message);
                console.log('üìã Detalhes:', JSON.stringify(insertError, null, 2));
            } else {
                console.log('‚úÖ Inser√ß√£o bem-sucedida!');
                console.log('üìã Dados:', insertData);
            }
        }
        
    } catch (err) {
        console.log('‚ùå Erro geral:', err.message);
    }
}

async function listTables() {
    console.log('');
    console.log('üìã Verificando tabelas...');
    console.log('========================');
    
    try {
        const { data, error } = await supabase
            .from('users')
            .select('count')
            .limit(1);
        
        if (error) {
            console.log('‚ùå Erro ao acessar tabela users:', error.message);
        } else {
            console.log('‚úÖ Tabela users acess√≠vel');
        }
        
        const { data: venuesData, error: venuesError } = await supabase
            .from('venues')
            .select('count')
            .limit(1);
        
        if (venuesError) {
            console.log('‚ùå Erro ao acessar tabela venues:', venuesError.message);
        } else {
            console.log('‚úÖ Tabela venues acess√≠vel');
        }
        
    } catch (err) {
        console.log('‚ùå Erro ao verificar tabelas:', err.message);
    }
}

async function runChecks() {
    await checkPolicies();
    await listTables();
    
    console.log('');
    console.log('üéØ Pr√≥ximos passos:');
    console.log('===================');
    console.log('1. Se a inser√ß√£o funcionou, o problema est√° resolvido');
    console.log('2. Se n√£o funcionou, as pol√≠ticas RLS ainda est√£o incorretas');
    console.log('3. Verifique se o SQL foi aplicado corretamente no Supabase');
}

runChecks(); 